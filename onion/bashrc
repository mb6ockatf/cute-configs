#!/usr/bin/env bash
readonly END="\033[0m"
readonly BLACK="\033[0;30m"
readonly BLACKB="\033[1;30m"
readonly WHITE="\033[0;37m"
readonly WHITEB="\033[1;37m"
readonly RED="\033[0;31m"
readonly REDB="\033[1;31m"
readonly GREEN="\033[0;32m"
readonly GREENB="\033[1;32m"
readonly YELLOW="\033[0;33m"
readonly YELLOWB="\033[1;33m"
readonly BLUE="\033[0;34m"
readonly BLUEB="\033[1;34m"
readonly PURPLE="\033[0;35m"
readonly PURPLEB="\033[1;35m"
readonly LIGHTBLUE="\033[0;36m"
readonly LIGHTBLUEB="\033[1;36m"

# repeat character $1 $2 times
# params: $1 character, $2 number; output: $2 characters
repeat_char() {
	for ((i = 1; i < $2; i++)); do
		echo -n "$1"
	done
}

stats() {
	history | awk '{print $2}' | awk 'BEGIN {FS="|"} {print $1}' | sort \
		| uniq -c | sort -rn | head -30 | less
}

# format $2 message so it is $1 color
# outputs colorful message; returns 2 if wrong color
color::form_output() {
	if [[ "$1" == "--help" ]] || [[ "$1" == "-h" ]] || [[ -z "$1" ]]; then
		name="color::form_output"
		cat << end_of_message
apply color to any text
USAGE
- show this message (default)
	$name [-h, --help]
- get colored message
	$name color message
$(repeat_char - 80)
by @mb6ockatf, Sat 01 Jul 2023 01:34:03 PM MSK
end_of_message
		return 0
	fi
	local color="$1" message="$2"
	case "$color" in
		black) color="${BLACK}" ;;
		blackb) color="${BLACKB}" ;;
		white) color="${WHITE}" ;;
		whiteb) color="${WHITEB}" ;;
		red) color="${RED}" ;;
		redb) color="${REDB}" ;;
		green) color="${GREEN}" ;;
		greenb) color="${GREENB}" ;;
		yellow) color="${YELLOW}" ;;
		yellowb) color="${YELLOWB}" ;;
		blue) color="${BLUE}"  ;;
		blueb) color="${BLUEB}" ;;
		purple) color="${PURPLE}" ;;
		purpleb) color="${PURPLEB}" ;;
		lightblue) color="${LIGHTBLUE}" ;;
		lightblueb) color="${LIGHTBLUEB}" ;;
		*) return 2 ;;
	esac
	echo -e "${color}${message}${END}"
}

# print colors table (backgrounds & foregrounds). useful for choosing colors
color::color_table() {
	T='gYw'
	echo -e "\n                 40m     41m     42m     43m\
	44m     45m     46m     47m";
	for FGs in '    m' '   1m' '  30m' '1;30m' '  31m' '1;31m' '  32m' \
	    '1;32m' '  33m' '1;33m' '  34m' '1;34m' '  35m' '1;35m' \
	    '  36m' '1;36m' '  37m' '1;37m'; do
		FG=${FGs// /}
		echo -en " $FGs \033[$FG  $T  "
		for BG in 40m 41m 42m 43m 44m 45m 46m 47m; do
			echo -en "$EINS \033[$FG\033[$BG  $T  \033[0m"
		done
		echo
	done
  echo
}

# print full colorful table (may require much resources for rendering)
color::colorful() {
	for x in {0..8}; do
		for fg in {30..37}; do
			for bg in {40..47}; do
				echo -ne "\e[$x;$fg;$bg""m\\\e[$x;$fg;$bg""m\e[0;37;40m "
			done
			echo
		done
	done
	echo ""
}

# extract archieve files
# param $1 - archive name. returns 22 if not a valid file was passed
ex() {
	if [ -f "$1" ]; then
		case $1 in
			*.tar.bz2) tar xjf "$1";;
			*.tar.gz) tar xzf "$1";;
			*.bz2) bunzip2 "$1";;
			*.rar) unrar x "$1";;
			*.gz) gunzip "$1";;
			*.tar) tar xf "$1";;
			*.tbz2) tar xjf	"$1";;
			*.tgz) tar xzf "$1";;
			*.zip) unzip "$1";;
			*.Z) uncompress "$1";;
			*.7z) 7z x "$1" ;;
			*) echo "'$1' cannot be extracted via ex()" ;;
		esac
	else
		echo "'$1' is not a valid file"
		return 22
	fi
}

# change screen light if intel_backlight settings are present. requires sudo
# params: [night | -inc VALUE | -dec VALUE]
# returns 2 if backlight config is not available
light() {
	file="/sys/class/backlight/intel_backlight/brightness"
	if [[ ! -f $file ]]; then
		echo "intel_backlight settings are not available"
		return 2
	fi
	current=$(cat "$file")
	new="$current"
	if [ "$1" = "-dec" ]; then new=$(( current - $2 ))
	elif [ "$1" = "-inc" ]; then new=$(( current + $2 ))
	elif [ "$1" = "night" ]; then new=1; fi
	[[ "$new" -ge 0 ]] || exit
	echo "$new" | sudo tee "$file"
}

viewlines () {
	sed -n ''$1','$2'p' $3
}

# create neat git commits with gum, interactive
gum_commit() {
	TYPE=$(gum choose "fix" "feat" "docs" "style" "refactor" "test" \
	"chore" "revert")
	SCOPE=$(gum input --placeholder "scope")
	test -n "$SCOPE" && SCOPE="($SCOPE)"
	SUMMARY=$(gum input --value "$TYPE$SCOPE: " --placeholder \
"Summary of this change")
	DESCRIPTION=$(gum write --placeholder \
"Details of this change (CTRL+D to finish)")
	gum confirm "Commit changes?" && \
	git commit -m "$SUMMARY" -m "$DESCRIPTION"
}

# create colorful bash prompt message
# to actually implement this bash prompt, do:
#	export PROMPT_COMMAND=set_bash_prompt
# affects $PS1 value
set_bash_prompt() {
	LAST_RESULT=$?
	DIVIDER="\[\e[30;1m\]"
	COLOR_CMDCOUNT="\[\e[32;1m\]"  # green bold
	COLOR_USERNAME="\[\e[37;0m\]"  # white
	COLOR_USERHOSTAT="\[\e[36;1m\]"  # lightblueb
	COLOR_HOSTNAME="\[\e[35;1m\]"  # purple bold
	COLOR_GITBRANCH="\[\e[33;0m\]"  # yellow
	COLOR_VENV="\[\e[33;1m\]"  # yellow bold
	COLOR_PATH_OK="\[\e[32;1m\]"  # green bold
	COLOR_PATH_ERR="\[\e[31;1m\]"  # red bold
	COLOR_NONE="\[\e[0m\]"  # end
	if [ $LAST_RESULT -eq 0 ]; then PATH_COLOR="$COLOR_PATH_OK"
	else PATH_COLOR="$COLOR_PATH_ERR"; fi
	PS1="\n${DIVIDER}"
	PS1="${PS1}[${PATH_COLOR}\w${DIVIDER}"
	PS1="${PS1}:${COLOR_CMDCOUNT}\#${DIVIDER}"
	GIT_IS_AVAILABLE=$(git --version 2>&1 >/dev/null ; echo $?)
	if [ "$GIT_IS_AVAILABLE" -eq 0 ]; then
		git_answer=$(git rev-parse --is-inside-work-tree 2>&1 >/dev/null)
		if [ "$git_answer" = "" ]; then
			GIT_BRANCH=$(git symbolic-ref --short HEAD)
			PS1="${PS1}:${COLOR_GITBRANCH}${GIT_BRANCH}${DIVIDER}"
		fi
	fi
	if [ -n "$VIRTUAL_ENV" ]; then
		PS1="${PS1}:${COLOR_VENV}$(basename "$VIRTUAL_ENV")${DIVIDER}"
	fi
	PS1="${PS1}]"
	PS1+="\n[${DIVIDER}"
	PS1+="${COLOR_USERNAME}\u${COLOR_USERHOSTAT}"
	PS1+="@${COLOR_HOSTNAME}\h${DIVIDER}]"
	PS1+="${COLOR_NONE} "
}

mcd() {
        [ -d "$1" ] || mkdir "$1"
        cd "$1" && pwd
}

wttr() {
	local city="$1"
	local options="$2"
	local header="Accept-Language: en"
	if [[ "$options" -eq "" ]]; then
		options="1FnQp"
	fi
	curl -H "$header " "wttr.in/$city?$options"
}

alias cal="cal -m"
alias todo="todo.sh -@ -+ -c -t -v"
alias shellcheck='shellcheck -C'
alias parrot='curl parrot.live'
alias cowsay='cowsay -d -W 80'
alias moo='fortune | cowsay'
alias full_update='yay -Syuu --noconfirm'
alias update='yay -Syuu '
alias cp='cp -i'
alias df='df -h'
alias free='free -h'
alias np='nano -w PKGBUILD'
alias more=less
alias less="less -R"
alias ls='ls --color=auto'
alias rm='rm -ivI --preserve-root'
alias ln='ln -i'
alias chown='chown --preserve-root'
alias chmod='chmod --preserve-root'
alias chgrp='chgrp --preserve-root'
alias grep='grep --colour=auto'
alias egrep='egrep --colour=auto'
alias fgrep='fgrep --colour=auto'
alias py='python3'
alias pip='python3 -m pip'
alias vi='vim'
alias edit=vim
alias emacs=vim
alias google-chrome='/usr/bin/google-chrome-stable %U'
alias status='git status'
alias pull='git pull'
alias push='git push'
alias add='git add'
alias commit='gum_commit'
alias sha1='openssl sha1'
alias mkdir='mkdir -pv'
alias mount='mount | column -t'
alias h='cat .bash_history | sort | uniq -c | sort -nr'
alias j='jobs -l'
alias ping='ping -c 5'
alias fastping='ping -c 100 -i 0.2'
alias ping8="ping 8.8.8.8"
alias meminfo='free -l'
alias psmem='ps auxf | sort -nr -k 4'
alias psmem10='ps auxf | sort -nr -k 4 | head -10'
alias pscpu='ps auxf | sort -nr -k 3'
alias pscpu10='ps auxf | sort -nr -k 3 | head -10'
alias cpuinfo='lscpu'
alias gpumeminfo='grep -i --color memory /var/log/Xorg.0.log'
alias wget='wget -c'
alias :wq="exit"
alias :x="exit"
alias ZZ="exit"
[ -d "$HOME/.atom" ] && alias atom="~/.atom/atom &"
shopt -s 'checkwinsize'
shopt -s 'expand_aliases'
shopt -s histappend
export QT_SELECT=4
export PYENV_ROOT="$HOME/.pyenv"
export HISTCONTROL=ignoreboth:erasedups
export HISTFILESIZE=2000
export PROMPT_COMMAND=set_bash_prompt
export BROWSER=/usr/bin/chromium
export EDITOR=vim
export LESS_TERMCAP_mb=$(tput bold; tput setaf 2) # green
export LESS_TERMCAP_md=$(tput bold; tput setaf 6) # cyan
export LESS_TERMCAP_me=$(tput sgr0)
export LESS_TERMCAP_so=$(tput bold; tput setaf 3; tput setab 4) # yellow on blue
export LESS_TERMCAP_se=$(tput rmso; tput sgr0)
export LESS_TERMCAP_us=$(tput smul; tput bold; tput setaf 7) # white
export LESS_TERMCAP_ue=$(tput rmul; tput sgr0)
export LESS_TERMCAP_mr=$(tput rev)
export LESS_TERMCAP_mh=$(tput dim)
export LESS_TERMCAP_ZN=$(tput ssubm)
export LESS_TERMCAP_ZV=$(tput rsubm)
export LESS_TERMCAP_ZO=$(tput ssupm)
export LESS_TERMCAP_ZW=$(tput rsupm)
export GROFF_NO_SGR=1         # For Konsole and Gnome-terminal

command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"
moo
# rate.sx
# parrotsay
# rickroll: https://github.com/keroserene/rickrollrc
# curl -s -L https://raw.githubusercontent.com/keroserene/rickrollrc/master/roll.sh | bash
# curl -s -L https://bit.ly/3zvELNz | bash
