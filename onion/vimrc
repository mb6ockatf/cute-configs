se nocompatible
se number
se nobomb
se wrap
se wrapmargin=80
se linebreak
se textwidth=80
se colorcolumn=80
se backspace=2
se autoindent
se history=50
se ruler
se nopaste
se showcmd
se wildmenu
se ttimeout
se ttimeoutlen=100
se display=truncate
se cmdheight=1
se mouse-=a
se conceallevel=1
se bg=dark
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>
vnoremap <Up> <Nop>
vnoremap <Down> <Nop>
vnoremap <Left> <Nop>
vnoremap <Right> <Nop>
inoremap <Up> <Nop>
inoremap <Down> <Nop>
inoremap <Left> <Nop>
inoremap <Right> <Nop>
map <F1> :w<CR>
map <F2> :wq<CR>
map <F3> :NERDTree<CR>
map <F7> :tabp<CR>
map <F8> :tabn<CR>
map <F9> :tabnew<CR>
se tabpagemax=15
call plug#begin()
Plug 'morhetz/gruvbox'
Plug 'lervag/vimtex'
" Plug 'sirver/ultisnips'
Plug 'honza/vim-snippets'
Plug 'preservim/nerdtree'
Plug 'tpope/vim-fugitive'
call plug#end()
" PlugUpdate
" PlugInstall
colo gruvbox
let g:gruvbox_contrast_dark = 'hard'
let g:tex_flavor = 'latex'
let g:vimtex_view_method = 'zathura'
let g:vimtex_quickfix_mode = 0
let g:tex_conceal = 'abdmg'
let g:UltiSnipsExpandTrigger = '<tab>'
let g:UltiSnipsJumpForwardTrigger = '<tab>'
let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'
filetype detect
if &filetype == "python" || &filetype == "vim" || &filetype == "sh"
	se tabstop=4
	se shiftwidth=4
elseif &filetype == "html" || &filetype == "css"
	se tabstop=2
	se shiftwidth=2
	se nolinebreak
	se colorcolumn=140
	se textwidth=140
	se wrap
elseif &filetype == "asm"
	se tabstop=8
	se shiftwidth=8
	se expandtab
	se colorcolumn=80
	se textwidth=80
	se nolinebreak
	se wrap
elseif &filetype == "go"
	se colorcolumn=80
	se textwidth=80
	se nolinebreak
	se wrap
elseif &filetype == "haskell"
	se colorcolumn=75
	se textwidth=75
	se nolinebreak
	se wrap
	se tabstop=2
	se shiftwidth=2
	se expandtab
endif

function PrepareBeforeWrite()
	if &filetype == "python"
		%s/^	/    /e
	endif
	%s/\s\+$//e
	%s/\^datetime\^/\=strftime("%c")/e
	se fenc=utf-8
endfunction


" return '[\s]' if trailing whitespace is detected || return ''
function StatuslineTrailingSpaceWarning()
	if !exists("b:statusline_trailing_space_warning")
		if !&modifiable
			let b:statusline_trailing_space_warning = ''
			return b:statusline_trailing_space_warning
		endif
		if search('\s\+$', 'nw') != 0
			let b:statusline_trailing_space_warning = '[\s]'
		else
			let b:statusline_trailing_space_warning = ''
		endif
	endif
	return b:statusline_trailing_space_warning
endfunction

" return syntax highlight group under cursor || return ''
function StatuslineCurrentHighlight()
	let name = synIDattr(synID(line('.'),col('.'), 1), 'name')
	if name == '' | return ''  | else | return '[' . name . ']' | endif
endfunction

" return a warning for "long lines" where "long" is either textwidth value if it
" was set, otherwise 80
" return '' if no long lines
" return '[#x,my,$z]' if long lines are found, were x is number of long
" lines, y is median length of long lines and z is length of longest line
function StatuslineLongLineWarning()
	if !exists("b:statusline_long_line_warning")
		if !&modifiable
			let b:statusline_long_line_warning = ''
			return b:statusline_long_line_warning
		endif
		let long_line_lens = s:LongLines()
		if len(long_line_lens) > 0
			let b:statusline_long_line_warning = "[" .
					\ '#' . len(long_line_lens) . "," .
					\ 'm' . s:Median(long_line_lens) . "," .
					\ '$' . max(long_line_lens) . "]"
		else
			let b:statusline_long_line_warning = ""
		endif
	endif
	return b:statusline_long_line_warning
endfunction

" return list containing lengths of long lines in this buffer
function s:LongLines()
	let threshold = (&tw ? &tw : 80)
	let spaces = repeat(" ", &ts)
	let long_line_lens = []
	let i = 1
	while i <= line("$")
		let len = strlen(substitute(getline(i), '\t', spaces, 'g'))
		if len > threshold
			call add(long_line_lens, len)
		endif
		let i += 1
	endwhile
	return long_line_lens
endfunction

function s:Median(nums)  " find the median of given array of numbers
	let nums = sort(a:nums)
	let l = len(nums)
	if l % 2 == 1
		let i = (l - 1) / 2
		return nums[i]
	else
		return nums[l / 2] + nums[(l / 2) - 1] / 2
	endif
endfunction

se laststatus=2
se statusline=%-03.f
se statusline+=%#warningmsg#
se statusline+=%{&ff!='unix'?'['.&ff.']':''}
se statusline+=%*
se statusline+=%#warningmsg#
se statusline+=%{(&fenc!='utf-8'&&&fenc!='')?'['.&fenc.']':''}
se statusline+=%*
se statusline+=%h%y%r%m
se statusline+=%{StatuslineTrailingSpaceWarning()}
se statusline+=%{StatuslineLongLineWarning()}
se statusline+=%#warningmsg#
se statusline+=%#error#
se statusline+=%{&paste?'[paste]':''}
se statusline+=%*
se statusline+=%{FugitiveStatusline()}
se statusline+=%=
se statusline+=%{StatuslineCurrentHighlight()}\ \
se statusline+=%c,
se statusline+=%l/%L
se statusline+=\ %P
autocmd cursorhold,bufwritepost * unlet! b:statusline_trailing_space_warning
autocmd cursorhold,bufwritepost * unlet! b:statusline_long_line_warning
augroup PreWriteEdits
autocmd BufWritePre * call PrepareBeforeWrite()
augroup END
syntax on
